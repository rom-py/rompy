[build-system]
requires = ["setuptools", "versioneer[toml]"]
build-backend = "setuptools.build_meta"

[project]
name = "rompy"
description = "Relocatable Ocean Modelling in PYthon (rompy)"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["relocatable", "ocean", "modelling", "python", "csiro"]
authors = [
  { name = "CSIRO", email="paul.branson@csiro.au" },
]
maintainers = [
  {name = "Paul Branson", email = "paul.branson@csiro.au"},
  {name = "Tom Durrant", email = "t.durrant@oceanum.science"},
  {name = "Rafael Guedes", email = "r.guedes@oceanum.science"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    "cartopy",
    "click",
    "cloudpathlib",
    "cookiecutter>=2.6",
    "dask",
    "fsspec",
    "geopandas",
    "h5py",
    "intake",
    "intake-xarray",
    "intake-geopandas",
    "matplotlib",
    "netcdf4",
    "numpy",
    "oceanum",
    "owslib",
    "pandas",
    "pydantic>2",
    "pydantic_numpy",
    "scipy",
    "tqdm",
    "xarray",
    "wavespectra",
    "isodate",
]
dynamic = ["version"]

[project.urls]
"Documentation" = "https://oceanum.github.io/rompy/index.html"
"Source" = "https://github.com/rom-py/rompy"
"Tracker" = "https://github.com/rom-py/rompy/issues"
"Changelog" = "https://github.com/rom-py/rompy/blob/main/HISTORY.rst"

[project.scripts]
rompy = "rompy.cli:main"

[project.entry-points."intake.drivers"]
"netcdf_fcstack" = "rompy.intake:NetCDFFCStackSource"

[project.entry-points."rompy.config"]
base = "rompy.core.config:BaseConfig"
swan = "rompy.swan.config:SwanConfig"
swan_components = "rompy.swan.config:SwanConfigComponents"
schismcsiro = "rompy.schism.config:SchismCSIROConfig"
schism = "rompy.schism.config:SCHISMConfig"
schismcsiromigration = "rompy.schism.config:SchismCSIROMigrationConfig"

[project.entry-points."rompy.source"]
dataset = "rompy.core.source:SourceDataset"
file = "rompy.core.source:SourceFile"
intake = "rompy.core.source:SourceIntake"
datamesh = "rompy.core.source:SourceDatamesh"
wavespectra = "rompy.core.source:SourceWavespectra"
"csv:timeseries" = "rompy.core.source:SourceTimeseriesCSV"
"dataframe:timeseries" = "rompy.core.source:SourceTimeseriesDataFrame"

[project.entry-points."intake.catalogs"]
"rompy_data" = "rompy:cat"

[project.optional-dependencies]
test = [
  "pytest",
  "envyaml",
]
extra = [
    "gcsfs",
    "zarr",
]
schism = [
    "appdirs", # pyschism subpackage dependency
    "tqdm_logging_wrapper", # pyschism subpackage dependency
    "seawater", # pyschism subpackage dependency
    "xmltodict", # pyschism subpackage dependency
]
docs = [
    "autodoc_pydantic",
    "ipython",
    "nbsphinx",
    "pydata_sphinx_theme",
    "sphinx<7.3.6",
    "sphinx-collections",
]

[tool.setuptools.packages.find]
exclude = ["docker", "docs", "notebooks", "scripts", "tests"]

[tool.setuptools.package-data]
"*" = ["*.y*ml", "*.csv", "*.html"]

[tool.setuptools.dynamic]
version = {attr = "rompy.__version__"}

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.black]
line-length = 88
